(do ;; Testing contract for fund transfers via offer / accept
  
  
  ;; function that accepts quarter of all funds offered
  (defn accept-quarter
    ^{:callable true}
    [] 
    (accept (long (* 0.25 *offer*))))
  
  ;; function that accepts half all funds offered
  (defn accept-all
    ^{:callable true}
    []
    (accept *offer*))
  
  ;; function that accepts funds then rolls back
  (defn accept-rollback
    ^{:callable true}
    []
    (accept *offer*)
    (rollback :foo))
  
  ;; function that accepts funds repeatedly
  ;; Note: *offer* should be reduced to zero by first accept.
  (defn accept-repeat 
    ^{:callable true}
    []
    (accept *offer*)
    (assert (== 0 *offer*))
    (accept *offer*)
    (accept *offer*)
    *offer*)
  
  ;; function that accepts nothing
  (defn accept-zero 
    ^{:callable true}
    []
    (accept 0))
  
    ;; function that accepts offer, and forwards to self
  (defn accept-forward 
    ^{:callable true}
    []
    (let [amt *offer*]
      (accept amt)
      (call *address* amt (accept-all)))) 
  
  ;; function that accepts nothing, but returns the offered value
  (defn echo-offer 
    ^{:callable true}
    []
    *offer*)
  
  )
