;;
;;
;; Testing `asset.simple-nft`.
;;
;;


;;;;;;;;;; Setup

($.stream/out! (str $.term/clear.screen
                    "Testing `asset.simple-nft`"))


;; Deploying test version of `asset.simple-nft` instead of importing stable version.
;;
($.file/read "src/main/resources/asset/simple-nft.cvx")


(eval `(def nft
            (deploy (quote ~(cons 'do
                                  (next $/*result*))))))

;; Requiring test suites for `convex.asset` since this library implement that interface.
;;
($.file/read "src/test/cvx/test/convex/asset.cvx")


(def asset.test
     (deploy (cons 'do
                   $/*result*)))


(asset.test/setup)


;; Other libraries
;;
(def T
     $.test)


;; Default account is an actor, key is set to transform it into a user account.
;;
(set-key $.account/fake-key)


;;;;;;;;;; Test suites


(defn suite.asset

  ^{:doc {:decription "Ensures the `convex.asset` interface is respected."}}

  []

  (T/group '((T/path.conj 'asset)

             ;; Quantities

             (T/trx '(= #{}
                        (asset/quantity-zero nft)))

             (T/trx '(= #{1 2 3 4}
                        (asset/quantity-add nft
                                            #{1 2}
                                            #{3 4})))
             (T/trx '(= #{1 2 3 4}
                        (asset/quantity-add nft
                                            #{1 2 3}
                                            #{2 3 4})))

             (T/trx '(= #{1 2}
                        (asset/quantity-sub nft
                                            #{1 2 3}
                                            #{3 4 5})))
             (T/trx '(= #{1 2}
                        (asset/quantity-add nft
                                            #{1 2}
                                            nil)))
             (T/trx '(= #{1 2}
                        (asset/quantity-add nft
                                            nil
                                            #{1 2})))

             (T/trx '(= #{1 2}
                        (asset/quantity-sub nft
                                            #{1 2}
                                            nil)))

             (T/trx '(= #{}
                        (asset/quantity-sub nft
                                            nil
                                            #{1 2})))

             (T/trx '(asset/quantity-contains? nft
                                               #{1 2 3}
                                               #{2 3}))

             (T/trx '(not (asset/quantity-contains? nft
                                                    #{1 2 3}
                                                    #{3 4})))

             (T/trx '(not (asset/quantity-contains? nft
                                                    #{1 2 3}
                                                    #{4 5 6})))

             ;; Transfer and ownership

             (T/trx '(vector? (def total
                                   (loop [acc []]
                                     (if (= (count acc)
                                           4)
                                      acc
                                      (recur (conj acc
                                                   (call nft
                                                         (create-nft))))))))
                    {:description "4 NFTs created."})

             (T/trx '(= (set total)
                        (asset/balance nft
                                       *address*))
                    {:description "Creator balance contain all NFTs."})

             (T/trx '(asset/owns? *address*
                                  [nft
                                   (set total)])
                    {:description "Initially, creator owns all NFTs."})

             (T/trx '(address? (def user-1
                                    ($.account/zombie)))
                    {:description "User 1 deployed."})

             (T/trx '(address? (def user-2
                                    ($.account/zombie)))
                    {:description "User 2 deployed."})

             (def balance-creator
                  #{(total 0)})

             (def balance-user-1
                  (set (next total)))

             (T/trx '(= balance-user-1
                        (asset/transfer user-1
                                        [nft
                                         balance-user-1]))
                    {:description "Transfer almost all NFTs to user 1."})

             (T/trx '(= balance-user-1
                        (asset/balance nft
                                       user-1))
                    {:description "Balance of user 1 updated."})

             (T/trx '(= balance-creator
                        (asset/balance nft
                                       *address*))
                    {:description "Balance of created updated."})

             (T/trx '(not (asset/owns? *address*
                                       [nft
                                        balance-user-1]))
                    {:description "After transfer, creator do not own user 1 NFTs."})

             (T/trx '(asset/owns? user-1
                                  [nft
                                   balance-user-1])
                    {:description "After transfer, user 1 owns expected NFTs."})

             (T/trx '(asset/owns? *address*
                                  [nft
                                   balance-creator])
                    {:description "Creator still owns 1 NFT."})

             (T/trx '(= #{}
                        (asset/balance nft
                                       user-2))
                    {:description "User 2 balance is still empty."})

             (def balance-user-2
                  balance-creator)

             (T/trx '(= balance-user-2
                        (asset/transfer user-2
                                        [nft
                                         balance-user-2]))
                    {:description "Transfer remaining NFT to user 2."})

             (T/trx '(= balance-user-2
                        (asset/balance nft
                                       user-2))
                    {:description "Balance of user 2 updated."})

             (T/trx '(= #{}
                        (asset/balance nft
                                       *address*))
                    {:description "Balance of creator is empty."})

             (T/trx '(asset/owns? user-2
                                  [nft
                                   balance-user-2])
                    {:description "User 2 owns remaining NFT."})


             (T/trx '(not (asset/owns? *address*
                                       [nft
                                        balance-user-2]))
                    {:description "Creator lost ownership of its last NFT."})

             (T/trx '(= balance-user-1
                        (asset/balance nft
                                       user-1))
                    {:description "Balance of user 1 unchanged."})

             (asset.test/suite.main nft
                                    user-1
                                    user-2))))



(defn suite.burn

  ^{:doc {:description "Burning NFTs."}}

  []

  (T/group '((T/path.conj 'burn)

             (T/fail.code #{:TRUST}
                          '(call nft
                                 (burn #{-1}))
                          {:description "Cannot burn inexistant NFT."})

             (T/trx '(long? (def piece
                                 (nft/create)))
                    {:description "NFT created."})

             (T/trx '(= #{piece}
                        (call nft
                              (burn #{piece})))
                    {:description "NFT burned."})

             (T/fail.code #{:TRUST}
                          '(call nft
                                 (burn #{piece}))
                          {:description "Impossible to double-burn."})

             (T/trx '(= #{}
                        (asset/balance nft
                                       *address*))
                    {:description "Balance is empty after burning."})

             (T/trx '(not (asset/owns? *address*
                                       [nft
                                        #{piece} ]))
                    {:description "Cannot own burned NFT."}))))


;;;


(defn suite.main

  ^{:doc {:description "Main suite gathering all other suites."}}

  []

  (T/group '((T/path.conj 'asset.simple-nft)
             (suite.asset)
             (suite.burn))))


;;;


(T/report.clear)
(suite.main)
(T/print "suite.main")
