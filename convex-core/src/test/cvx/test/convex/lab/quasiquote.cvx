
;;;;;;;;;; Experimental Convex Lisp quasiquote impl

(declare quasiquote*)

(defmacro quasiquote [form]
  (quasiquote* form))

(defn ^:private? qq-seq [form]
  (when (empty? form) (return form))
  
  (let [fst (first form)]
	(cond 
	  (= 'quasiquote 
	      fst) form	   ;; no change, this is just another
      (= 'unqoute)	
		 )	 
		  ))

(defn quasiquote* [form]
  (cond
	;; first catch [] () {} #{} and nil, which dont expand
    (empty? form) (return form) 
	
    ;; handle ech type of data structure
    (list? form)
      (cond
        (= (first form) 'quasiquote
          ) form ;; Nested quasiquote, no futher expansion
        (qq-seq form))
    (vector? form)
      (qq-seq form)
    (set? form)
      (cons 'hash-set 
    		(qq-seq form))
    (map? form)
      (cons 'hash-map 
    		(qq-seq (apply concat form)))
    
    ;; Nothing special, so just quote value  
    (list 'quote 
    		form)))