;;
;;
;; Testing `convex.fungible`.
;;
;;


;;;;;;;;;; Setup


($.stream/out! (str $.term/clear.screen
                    "Testing `convex.fungible`"))


;; Deploying test version of `convex.fungible` instead of importing stable version.
;;
($.file/read "src/main/cvx/convex/fungible.cvx")


(eval `(def fungible
            (deploy (quote ~(cons 'do
                                  (next $/*result*))))))

($.file/exec "src/test/cvx/test/convex/fungible/generic.cvx")


;; Requiring test suites for `convex.asset` since fungible tokens implement that interface.
;;
($.file/read "src/test/cvx/test/convex/asset.cvx")


(def asset.test
     (deploy (cons 'do
                    $/*result*)))


(asset.test/setup)


;; Other imports.
;;
(import convex.asset :as asset)


(def T
     $.test)


;; Default account is an actor, key is set to transform it into a user account.
;;
(set-key $.account/fake-key)


;;;;;;;;;; Test suites


(defn suite.asset

  ^{:doc {:description "Testing that the library follows the `convex.asset` interface."}}

  []

  (T/group `((T/path.conj 'suite.asset)

             (def supply
                  1000000)

             (T/trx '(address? (def token
                                    (deploy (fungible/build-token {:supply supply}))))
                    {:description "Token deployed"})

             (suite.fungible token
                             supply
                             *address*)

             ;; Transfers

             (def receiver
                  ($.account/zombie))

             (T/trx '(= 500
                        (asset/offer receiver
                                     [token
                                      500]))
                    {:description "Offer receiver some tokens."})

             (T/trx '(= 500
                        (asset/get-offer token
                                         *address*
                                         receiver))
                    {:description "First offer has been issued."})

             (T/trx '(= 1000
                        (asset/offer receiver
                                     [token
                                      1000]))
                    {:description "Updating offer."})

             (T/trx '(= 1000
                        (asset/get-offer token
                                         *address*
                                         receiver))
                    {:description "Offer has been updated."})

             (T/trx '(= 250
                        (eval-as receiver
                                 `(~asset/accept ~*address*
                                                 [~token
                                                  250])))
                    {:description "Partly accepting an offer, returns current balance."})

             (T/trx '(= 750
                        (asset/get-offer token
                                         *address*
                                         receiver))
                    {:description "Remaining offer is still valid."})

             (T/trx '(= 1000
                        (eval-as receiver
                                 `(~asset/accept ~*address*
                                                 [~token
                                                  750])))
                    {:description "Accepting remaining offer, returns current balance."})

             (T/trx '(= 2000
                        (asset/transfer receiver
                                        [token
                                         1000]))
                    {:description "Transfer some tokens to receiver (arity 2), returns current balance."})

             (T/trx '(= {token 3000}
                        (asset/transfer receiver
                                        {token 1000}))
                    {:description "Transfer some tokens to receiver (arity 3), returns current balance."})

             (T/trx '(= (- supply
                           3000)
                        (asset/balance token
                                       *address*))
                    {:description "Villain received tokens."})

             (T/trx '(= 3000
                        (asset/balance token
                                       receiver))
                    {:description "Balance updated after transferring to receiver."})


             ;; Ownership

             (def balance-receiver
                  (asset/balance token
                                 receiver))

             (T/trx '(asset/owns? receiver
                                  [token
                                   (dec balance-receiver)])
                    {:description "Villain owns at least less than its balance."})

             (T/trx '(asset/owns? receiver
                                  [token
                                   balance-receiver])
                    {:description "Villain owns its balance."})

             (T/trx '(not (asset/owns? receiver
                                       [token
                                        (inc balance-receiver)]))
                    {:description "Villain cannot own more than its balance."})


             ;; Token arithmetics

             (T/trx '(= 0
                        (asset/quantity-zero token))
                    {:description "Empty balance is 0."})

             (T/trx '(= 110
                        (asset/quantity-add token
                                            100
                                            10))
                    {:description "Adding tokens."})

             (T/trx '(= 100
                        (asset/quantity-add token
                                            100
                                            nil))
                    {:description "Adding nil."})

             (T/trx '(= 100
                        (asset/quantity-add token
                                            nil
                                            100))
                    {:description "Adding to nil."})

             (T/trx '(= 90
                        (asset/quantity-sub token
                                            100
                                            10))
                    {:description "Subtracting tokens."})

             (T/trx '(= 100
                        (asset/quantity-sub token
                                            100
                                            nil))
                    {:description "Subtracting nil."})

             (T/trx '(zero? (asset/quantity-sub token
                                                nil
                                                100))
                    {:description "Subtracting from nil."})

             (T/trx '(= 0
                        (asset/quantity-sub token
                                            10
                                            1000))
                    {:description "Subtracting does not go below 0."})


             ;; Token comparisons

             (T/trx '(asset/quantity-contains? [token
                                                110]
                                               [token
                                                100]))

             (T/trx '(asset/quantity-contains? [token
                                                110]
                                               nil))

             (T/trx '(asset/quantity-contains? nil
                                               nil))

             (T/trx '(asset/quantity-contains? token
                                               110
                                               100))

             (T/trx '(asset/quantity-contains? token
                                               110
                                               nil))

             (T/trx '(asset/quantity-contains? token
                                               nil
                                               nil))

             (T/trx '(not (asset/quantity-contains? [token
                                                     100]
                                                    [token
                                                     110])))

             (T/trx '(not (asset/quantity-contains? nil
                                                    [token
                                                     110])))

             (T/trx '(not (asset/quantity-contains? token
                                                    100
                                                    110)))

             (T/trx '(not (asset/quantity-contains? token
                                                    nil
                                                    110))))))



(defn suite.build-token

  ^{:doc {:description "Builds a token and ensures good fungability behavior."}}

  []

  (T/group '((T/path.conj 'suite.build-token)

             (T/trx '(address? (def token
                                    (deploy (fungible/build-token {}))))
                    {:description "Token deployed"})

             (def receiver
                  ($.account/zombie))

             (def supply
                  (fungible/balance token
                                    *address*))

             (def amount
                  (long (/ supply
                           10)))

             (T/trx '(= amount
                        (fungible/transfer token
                                           receiver
                                           amount))
                    {:description "Transferring tokens to receiver."})

             (T/trx '(= (- supply
                           amount)
                        (fungible/balance token
                                          *address*))
                    {:description "Balance of sender updated after transfer."})

             (T/trx '(= amount
                        (fungible/balance token
                                          receiver))
                    {:description "Balance of receiver updated after transfer."})

             (T/fail.code #{:ASSERT}
                          '(fungible/transfer token
                                              receiver
                                              -1)
                          {:description "Cannot transfer negative amount."})

             (T/fail.code #{:ASSERT}
                          '(fungible/transfer token
                                              receiver
                                              (inc (fungible/balance token
                                                                     *address*)))
                          {:description "Cannot transfer more than hold."})

             (T/group '((T/trx '(= supply
                                   (fungible/transfer token
                                                      receiver
                                                      (fungible/balance token
                                                                        *address*)))
                               {:description "Transferring all tokens to receiver."})

                        (T/trx '(= 0
                                   (fungible/balance token
                                                     *address*))
                               {:description "Sender has transferred all owned tokens."})

                        (T/trx '(= supply
                                   (fungible/balance token
                                                     receiver))
                               {:description "Receiver holds whole supply."})
                        )))))



(defn suite.mint

  ^{:doc {:description "Builds a mintable token and ensures minting rules are enforced."}}

  []

  (T/group `((T/path.conj 'suite.mint)

             (def receiver
                  ($.account/zombie))

             (def supply.init
                  100)

             (def supply.max
                  1000) 

             (def supply.mintable
                  (- supply.max
                     supply.init))

             (T/trx `(boolean (def token
                                   (deploy '(do
                                              ~(fungible/build-token {:supply supply.init})
                                              ~(fungible/add-mint {:max-supply supply.max})))))
                    {:description "Token deployed."})

             (suite.fungible token
                             supply.init
                             *address*)

             ;; Minting

             (T/fail.code #{:ASSERT}
                          '(fungible/mint token (inc supply.mintable))
                          {:description "Cannot mint more than max supply."})

             (T/trx '(= supply.max
                        (fungible/mint token
                                       supply.mintable))
                    {:description "Minting and augmenting total supply."})

             (T/trx '(= supply.max
                        (fungible/balance token
                                          *address*))
                    {:description "Minted tokens added to balance."})

             (T/group `((T/path.conj :negative-minting)

                        (T/trx '(= supply.init
                                   (fungible/mint token
                                                  (- supply.mintable)))
                               {:description "Negative minting and reducing total supply."})

                        (T/trx '(= supply.init
                                   (fungible/balance token
                                                     *address*))
                               {:description "Balance adjusted after negative minting."})

                        (T/trx '(= 0
                                   (fungible/mint token
                                                  (- supply.init)))
                               {:description "Negative mint down to 0."})

                        (T/fail.code #{:ASSERT}
                                     '(fungible/mint token
                                                     -1)
                                     {:description "Cannot negative mint more than currently hold."})))

             (T/group `((T/path.conj :burning)

                        (T/trx '(= supply.init
                                   (fungible/burn token
                                                  supply.mintable))
                               {:description "Burning and reducing total supply."})

                        (T/trx '(= supply.init
                                   (fungible/balance token
                                                     *address*))
                               {:description "Balance adjusted after burning."})

                        (T/trx '(= 0
                                   (fungible/burn token
                                                  supply.init))
                               {:description "Burning down to 0."})

                        (T/fail.code #{:ASSERT}
                                     '(fungible/burn token
                                                     1)
                                     {:description "Cannot burn more than currently hold."})))
            (def supply.receiver
                 (long (/ supply.max
                          5)))

            (T/trx '(= supply.receiver
                       (fungible/transfer token
                                          receiver
                                          supply.receiver))
                   {:description "Transferring part of supply to receiver."})

            (T/trx '(= supply.receiver
                       (fungible/balance token
                                         receiver))
                   {:description "Balance of receiver updated after transfer."})

            (T/trx '(= (- supply.max
                          supply.receiver)
                       (fungible/burn token
                                      supply.receiver))
                   {:description "Can still burn hold tokens."})

            (T/fail.code #{:ASSERT}
                         '(fungible/burn token
                                         (inc (fungible/balance token
                                                                *address*)))
                         {:description "Cannot burn more than currently holding."})

            (T/fail.code #{:ASSERT}
                         '(fungible/mint token
                                         (inc supply.receiver))
                         {:description "After transfer, still Cannot mint more than max supply."})

            (T/trx '(= supply.receiver
                       (query (fungible/burn token
                                             (fungible/balance token
                                                               *address*))))
                   {:description "Can burn all currently hold tokens."})

            (T/fail.code #{:TRUST}
                         '(eval-as receiver
                                   `(~fungible/mint ~token
                                                    1))
                         {:description "Non-owner cannot mint anything."})

            (T/fail.code #{:TRUST}
                         '(eval-as receiver
                                   `(~fungible/mint ~token
                                                    ~(inc supply.max)))
                         {:description "Trust verified before amount during minting."})

            (T/fail.code #{:TRUST}
                         `(eval-as receiver
                                   `(~fungible/burn ~token
                                                    1))
                         {:description "Non-owner cannot burn anything."})

            (T/fail.code #{:TRUST}
                         '(eval-as receiver
                                   `(~fungible/burn ~token
                                                    ~(inc supply.max)))
                         {:description "Trust verified before amount during minting."}))))



;;;


(defn suite.main

  ^{:doc {:description "Main suite gathering all other test suites."}}

  []

  (T/group '((T/path.conj 'convex.fungible)
             (suite.asset)
             (suite.build-token)
             (suite.mint))))


;;;


(suite.main)
(T/print "convex.fungible")
