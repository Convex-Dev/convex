;;
;;
;; Testing `convex.registry`. 
;;
;;


;;;;;;;;;; Setup


($.file/read "src/main/cvx/convex/registry.cvx")


(def registry
     (deploy (concat ['do]
                     $/*result*
                     `[(do
                         (def cns-database
                              {})
                         (def trust
                              ~(call *registry*
                                     (cns-resolve 'convex.trust))))])))



(def T
     $.test)


;; Easier to interact with the Trust library if operating as a user account.
;;
(set-key $.account/fake-key)


;;;;;;;;;; Test suites


(defn suite.main

  ^{:doc {:description "Only test suite."}}

  []

  (T/group '((T/path.conj 'convex.registry)

             (T/trx '(nil? (call registry
                                 (cns-resolve 'some.name)))
                    {:description "Not found."})

			 (T/trx '(address? (def addr
									(deploy `(~registry/meta.set 42))))
			        {:description "Actor deployed with metadata."})

			 (T/trx '(= 42
					    (registry/meta.get addr))
			        {:description "Actor metadata retrieved."})

             (T/trx `(= [addr
                         *address*]
                        (get (call registry
                                   (cns-update 'some.name
                                               addr))
                             'some.name))
                    {:description "Registering address."})

             (T/trx '(= addr
                        (call registry
                              (cns-resolve 'some.name)))
                    {:description "Address registered."})

             (def addr-2
                  ($.account/zombie))


             (T/trx '(= [addr-2
                         *address*]
                        (get (call registry
                                   (cns-update 'some.name
                                               addr-2))
                             'some.name))
                    {:description "Controller can update name."})

             (def villain
                  ($.account/zombie))

             (T/fail.code #{:TRUST}
                          `(eval-as villain
                                    '(call ~registry
                                           (cns-update 'some.name
                                                       *address*)))
                          {:description "Cannot update existing name unless controller."})

             (T/trx '(= addr-2
                        (call registry
                              (cns-resolve 'some.name)))

                    {:description "Original mapping left intact."})

             (T/trx '(= [addr-2
                         villain]
                        (get (call registry
                                   (cns-control 'some.name
                                                villain))
                             'some.name))
                    {:description "Control transfered."})

             (T/fail.code #{:TRUST}
                          '(call registry
                                 (cns-update 'some.name
                                             addr))
                          {:description "Cannot update after transferring control."})

             (T/fail.code #{:TRUST}
                          '(call registry
                                 (cns-control 'some.name
                                              *address*))
                          {:description "Cannot transfer control when control is lost."})

             (T/trx '(= [addr
                         villain]
                        (get (eval-as villain
                                      `(call ~registry
                                             (cns-update 'some.name
                                                         ~addr)))
                             'some.name))
                    {:description "Villain can update after gaining control."})

             (T/trx '(= addr
                        (call registry
                              (cns-resolve 'some.name)))
                    {:description "Villain updated."})

             (T/trx '(= [addr-2
                         villain]
                        (get (eval-as villain
                                      `(call ~registry
                                             (cns-update 'another.name
                                                         ~addr-2)))
                             'another.name))
                    {:description "Villain can create new mapping."})

             (T/trx '(= addr-2
                        (call registry
                              (cns-resolve 'another.name)))
                    {:description "Villain created new mapping."}))))



;;;


(suite.main)
(T/print "convex.registry")
