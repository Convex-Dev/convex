'asset.nft.basic

(call *registry*
      (register {:description ["Enables the creation of Basic NFTs."
                               "A Basic NFT is merely an ownable Integer ID with immutable arbitrary metadata."
                               "Follows the interface described in `convex.asset`."]
                 :name         "Basic NFT creation and management"}))

(declare balance)

;;;;;;;;;; Values

(def counter
  ^{:doc {:description "Used for creating NFT ids."}}
  0)


(def offers
  ^{:doc {:description "Map of `owner` -> map of `recipient address` -> `set of NFT ids`"}}
  {})

(def meta
  ^{:doc {:description "Map of ID -> NFT metadata. May be nil for no metadata"}}
  {})


;;;;;;;;;; Implementation of `convex.asset` interface

(defn -direct-transfer
  ^{:private? true}
  ;; Used internally by [[accept]] and [[direct-transfer]].
  [sender receiver quantity]
  (let [receiver             (address receiver)
        sender-balance       (or (get-holding sender)
                                 #{})
        _                    (assert (subset? quantity
                                              sender-balance))
        receiver-balance     (or (get-holding receiver)
                                 #{})
        new-sender-balance   (difference sender-balance
                                         quantity)
        new-receiver-balance (union receiver-balance
                                    quantity)]
    (set-holding sender
                 new-sender-balance)
    (set-holding receiver
                 new-receiver-balance))
    quantity)


(defn accept
  ^{:callable? true
    :private?  true}
  [sender quantity]
  (let [sender           (address sender)
        sender-offers    (or (get offers
                                  sender)
                             {})
        offer            (or (get-in offers
                                     [sender
                                      *caller*])
                             #{})
        _                (assert (subset? quantity
                                          offer))
        receiver-balance (or (get-holding *caller*)
                             #{})
        new-offer        (difference offer
                                     quantity)]

    (def offers
       (assoc offers
              sender
              (assoc sender-offers
                     *caller*
                     new-offer)))

    (-direct-transfer sender
                      *caller*
                      quantity)))


(defn balance
  ^{:callable? true
    :private?  true}
  [owner]
  (or (get-holding owner)
      #{}))

(defn direct-transfer
  ^{:callable? true}
  [receiver quantity]
  (-direct-transfer *caller*
                    receiver
                    quantity))

(defn offer
  ^{:callable? true}
  [receiver quantity]
  (let [caller-offers (get offers *caller* {})]
    (def offers
         (assoc offers
                *caller*
                (assoc caller-offers
                       receiver
                       quantity)))))


(def quantity-add
  ^{:callable? true}
  union)

(def quantity-sub
  ^{:callable? true}
  difference)

(def quantity-subset?
  ^{:callable? true}
  subset?)

;;;;;;;;;; Callable functions


(defn burn
  ^{:callable? true
    :doc       {:description "Destroys a set of NFTs. NFTs must be owned by the caller."
                :signature   [{:params [nft-set]}]}}
  [nft-set]
  (let [owned-nfts (get-holding *caller*)
        nft-set    (cond
                     (integer? nft-set) #{nft-set}
                     (set? nft-set)  nft-set
                     :else           (set nft-set))]
    (when-not (subset? nft-set
                       owned-nfts)
      (fail :TRUST
            "Can only burn owned NFTs"))
    (set-holding *caller*
                 (difference owned-nfts
                             nft-set))
    ;; Remove metadata if it is there
    (def meta (reduce meta dissoc nft-set))
    nft-set))


(defn create
  ^{:callable? true
    :doc       {:description "Creates a new NFT with a fresh ID."
                :signature   [{:params []}
                              {:params [metadata]}]}}
  ([] (recur nil))
  ([metadata]
    (let [id         counter
          owner      *caller*
          owned-nfts (or (get-holding owner)
                       #{})]
      (set-holding owner
        (conj owned-nfts
          id))
      (or (nil? metadata)
        (def meta (assoc meta id metadata)))
      (def counter
        (inc counter))
      id)))
