'convex.asset

(call *registry*
      (register {:description ["An asset is either:"
                               "- A vector `[asset-address quantity]` indicating an asset managed by an actor"
                               "- A map `asset-adress` -> `quantity` indicating assets managed by one or more actors"
                               "Quantities are arbitrary and asset-specific."
                               "For a fungible currency, quantity is the amount ; for a non-fungible token, quantity may be a set of token ids."
                               "Key functions from this library are `balance`, `owns?`, and `transfer`."
                               "Other functions such as `accept` and `offer` provide more fine-grained control when required."
                               "Implementing a new asset means deploying an actor which defines the following callable functions:"
                               "- `(accept sender quantity)`"
                               "- `(balance owner)`"
                               "- `(check-transfer sender receiver quantity)`"
                               "- `(direct-transfer receiver quantity)`"
                               "- `(get-offet sender receiver)`"
                               "- `(offer receiver quantity`"
                               "- `(quantity-add asset-address a b)`"
                               "- `(quantity-sub asset-address a b)`"
                               "- `(quantity-subset a b)` ; returns true if `a` is considered a subset of `b`"
                               "For more information, see those functions defined in this library whose purpose is to delegate to asset implementations in a generic way."]
                 :name        "Asset abstraction library"}))


;;;;;;;;;; Private


(defn -make-map

  ^{:private? true}

  ;; Used by quantity functions.

  [a]

  (cond 
    (map? a)    a
    (vector? a) {(first a) (second a)}
    (nil? a)    {}))


;;;;;;;;;; Transfers


(defn accept

  ^{:doc {:description ["Accepts asset from sender."
                        "If asset contains multiple assets, accepts each in turn. MUST fail if the asset cannot be accepted."]
          :examples    [{:code "(accept sender [fungible-token-address 1000])"}]
          :signature   [{:params [sender [asset-address quantity]]}]}}

  [sender asset]

  (cond 
    (vector? asset)
    (let [asset-address (first asset)
          quantity      (second asset)]
       (call asset-address
             (accept sender
                     quantity)))

    (map? asset)
    (reduce (fn [m [asset-address quantity]]
              (assoc m
                     asset-address
                     (call asset-address
                           (accept sender
                                   quantity))))
            {}
            asset)))



(defn check-transfer
  
  ;; Independently of general transfer, you can test whether there are restrictions on transferring.

  ^{:doc {:description ["Checks whether sender can transfer this asset to receiver."
                        "Returns a descriptive failure message if there is a restriction prohibiting transfer, or nil if there is no restriction."]
          :examples    [{:code "(check-transfer sender receiver [fungible-token-address 1000])"}
                        {:code "(check-transfer sender receiver [non-fungible-token-address #{1 4 6}])"}]
          :signature   [{:params [sender receiver [asset-address quantity]]}]}}

  [sender receiver [asset-address quantity]]

  (query (call asset-address
               (check-transfer sender
                               receiver
                               quantity))))



(defn get-offer

  ^{:doc {:description ["Gets the current offer from `sender` to `receiver` for a given asset."
                        "Returns the quantity representing the current offer. Will be the 'zero' quantity if no open offer exists."]
          :examples    [{:code "(get-offer asset-address sender receiver)"}]
          :signature   [{:params [asset-address sender receiver]}]}}

  [asset-address sender receiver]

  (query (call asset-address
               (get-offer sender
                          receiver))))



(defn offer

  ;; For smart contract assets, you can offer and accept separately if you choose

  ^{:doc {:description ["Opens an offer of an `asset` to a `receiver`, which makes it possible for the receiver to 'accept' up to this quantity."
                        "May result in an error if the asset does not support open offers."]
          :examples    [{:code "(offer receiver [fungible-token-address 1000])"}
                        {:code "(offer receiver [non-fungible-token-address #{1 4 6}])"}]
          :signature   [{:params [receiver [asset-address quantity]]}]}}

  [receiver asset]

  (cond 
    (vector? asset)
    (let [asset-address (first asset)
          quantity      (second asset)]
       (call asset-address
             (offer receiver
                    quantity)))

    (map? asset)
    (reduce (fn [m [asset-address quantity]]
              (assoc m
                     asset-address
                     (call asset-address
                           (offer receiver
                                  quantity))))
            {}
            asset)))



(defn transfer

  ^{:doc {:description "Transfers asset to receiver. `data` is an arbitrary value, which will be passed to the receiver's `receive-asset` method."
          :examples    [{:code "(transfer receiver [fungible-token-address 1000])"}
                        {:code "(transfer receiver [non-fungible-token-address #{1 4 6}] optional-data)"}]
          :signature   [{:params [receiver asset]}
                        {:params [receiver asset data]}]}}


  ([receiver asset]

   (transfer receiver
             asset
             nil))


  ([receiver asset data]

   (cond
     (vector? asset)
     (let [[asset-address
            quantity]     asset]
       (cond
         (callable? receiver
                    'receive-asset)
         (do 
           (call asset-address
                 (offer receiver
                        quantity))
           (call receiver
                 (receive-asset asset
                                data)))

         (actor? receiver)
         (fail "Receiver does not have receive-asset function")

         (account? receiver)
         (call asset-address
               (direct-transfer receiver
                                quantity))

         :else
         (fail "Address cannot receive asset")))

     (map? asset)
     (reduce (fn [acc entry]
               (assoc acc
                      (first entry)
                      (transfer receiver
                                entry
                                data)))
             {}
             asset)

     :else
     (fail "Invalid asset"))))


;;;;;;;;;; Ownership


(defn balance

  ^{:doc {:description ["Returns asset balance for a specified owner, or the current address if not supplied."
                        "Return value will be in the quantity format as specified by the asset type."]
          :examples    [{:code "(balance asset-address owner)"}]
          :signature   [{:params [asset-address]}
                        {:params [asset-address owner]}]}}


  ([asset-address]

   (query (call asset-address
                (balance *address*))))


  ([asset-address owner]

   (query (call asset-address
                (balance owner)))))



(defn owns?

  ^{:doc {:description "Tests whether owner owns at least a given quantity of an asset",
          :examples    [{:code "(owns? owner [fungible-token-address 1000])"}
                        {:code "(owns? owner [non-fungible-token-address #{1 4 6}])"}]
          :signature   [{:params [owner asset]}]}}

  [owner asset]

  (query
    (cond
      (vector? asset)
      (let [[asset-address
             quantity]     asset
            bal            (call asset-address
                                 (balance owner))]
        (call asset-address
              (quantity-subset? quantity
                                bal)))

      (map? asset)
      (reduce (fn [result [asset-address quantity]]
                (if (call asset-address
                          (quantity-subset? quantity
                                            (call asset-address
                                                  (balance owner))))
                  true
                  (reduced false)))
              true
              asset)

      ;; Interpret nil as the 'zero' asset, which everybody owns
      (nil? asset)
      true)))


;;;;;;;;;; Quantities


(defn quantity-add

  ^{:doc {:description ["Adds two asset quantities. Quantities must be specified in the format required by the asset type."
                        "Nil may be used to indicate the 'zero' quantity."]
          :examples    [{:code "(quantity-add fungible-token 100 1000)"}
                        {:code "(quantity-add non-fungible-token #{1 2} #{3 4})"}
                        {:code "(quantity-add [token-a 100] [token-b 1000])"}]
          :signature   [{:params [asset-a asset-b]}
                        {:params [asset-address a b]}]}}


  ([asset-a asset-b]

   (let [asset-a (-make-map asset-a)
         asset-b (-make-map asset-b)]
     (reduce (fn [m [asset-address qb]]
               (let [qa (get m
                             asset-address)]
                 (assoc m
                        asset-address
                        (quantity-add asset-address
                                      qa
                                      qb))))
             asset-a
             asset-b)))


  ([asset-address a b]

   (query (call asset-address
                (quantity-add a
                              b)))))



(defn quantity-sub

  ^{:doc {:description ["Subracts a quantity from another quantity for a given asset. Quantities must be specified in the format required by the asset type."
                        "Subtracting a larger amount from a smaller amount should return 'zero' or equivalent, although the exact meaning of this operation may be asset-specific."
                        "Nil may be used to indicate the 'zero' quantity in inputs."]
          :examples    [{:code "(quantity-sub fungible-token 500 300)"}
                        {:code "(quantity-sub non-fungible-token #{1 2 3 4} #{2 3})"}]
          :signature   [{:params [asset-a asset-b]}
                        {:params [asset-address a b]}]}}


  ([asset-a asset-b]

   (let [asset-a (-make-map asset-a)
         asset-b (-make-map asset-b)]
     (reduce (fn [m [asset-address qb]]
               (let [qa (get m
                             asset-address)]
                 (if (= qa
                        qb) 
                   (dissoc m
                           asset-address)
                   (assoc m
                          asset-address
                          (quantity-sub asset-address
                                        qa
                                        qb)))))
             asset-a
             asset-b)))


  ([asset-address a b]

   (query (call asset-address
                (quantity-sub a
                              b)))))



(defn quantity-zero

  ^{:doc {:description "Returns the unique 'zero' quantity for the given asset."
          :examples    [{:code   "(quantity-zero fungible-token)"
                         :result 0}
                        {:code   "(quantity-zero non-fungible-token)"
                         :result #{}}]
          :signature   [{:params [asset-address]}]}}

  [asset-address]

  (query (call asset-address
               (quantity-add nil
                             nil))))



(defn quantity-contains?

  ^{:doc {:description "Returns true if first quantity is >= second quantity. Any valid quantity must contain the 'zero' quantity."
          :examples    [{:code   "(quantity-contains? fungible-token 100 60)"
                         :result true}
                        {:code   "(quantity-contains? non-fungible-token #{1 2} #{2 3})"
                         :result false}]
          :signature   [{:params [asset-a asset-b]}
                        {:params [asset a b]}]}}


  ([asset-a asset-b]

   (query
     (let [asset-a (-make-map asset-a)
           asset-b (-make-map asset-b)]
       (reduce (fn [m [asset-address qb]]
                 (let [qa (get asset-a
                               asset-address)]
                   (cond
                     (= qa
                        qb)
                     true

                     (call asset-address
                           (quantity-subset? qb
                                             qa))
                     true

                     :else
                     (reduced false))))
               true
               asset-b))))


  ([asset-address a b]

   (query (call asset-address
                (quantity-subset? b
                                  a)))))
