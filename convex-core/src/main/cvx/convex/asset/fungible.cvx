'convex.fungible

(call *registry*
      (register {:description ["Provides library functions for building and managing standard fungible assets."
                               "Quantity is expressed as a long representing the amount of an asset."
                               "The `build-token` function creates deployable code that follows the interface described in `convex.asset`."]
                 :name        "Fungible token creation and management"}))

(declare balance transfer)

;;;;;;;;;; API for Building fungible token actors

(defn add-mint
  ^{:doc {:description ["Creates deployable code that, when added to actor code from `build-token`, allows priviledged accounts to mint and burn tokens."
                        "Configuration map contains:"
                        "- `:max-supply`, a long designating the maximum mintable supply (defaults to unlimited)"
                        "- `:minter`, Trust Monitor from `convex.trust` (defaults to *address*)"]
          :examples    [{:code "(deploy [(build-token {}) (add-mint {:minter *address* :max-supply 1000000000})])"}]
          :signature   [{:params [config]}]}}
  [config]
  (let [max-supply (int (get config :max-supply 0))
        minter     (or (:minter config) *address*)]
    (or (<= 0 max-supply) (fail "Max supply must be non-negative"))
    `(do
       (import convex.trust :as trust)
       (declare balance transfer)

       ;; Controller defining who is allowed to mint tokens
       (def minter ~minter)

       ;; Maximum supply (limit after minting)
       ~(if max-supply `(def max-supply ~max-supply))

       (defn burn
         ^{:callable true}
         [amount]
         (when-not (trust/trusted? minter *caller* :burn) (fail :TRUST "No rights to burn"))
         (let [amount (int amount)
               bal    (balance *caller*)]
           ;; Burn amount must be less than or equal to caller's balance.
           (cond (< amount 0) (fail :ARGUMENT "Cannot burn negative quantity"))
           (cond (> amount bal) (fail :FUNDS "Burn amount not available" ))
           
           ;; do updates to balance and supply
           (let [new-supply (- supply amount)]
        		 (log "MINT" *caller* (- amount) new-supply)
        		 (set-holding *caller* (- bal amount))
                 (set! supply new-supply)
                 )
           ))

       (defn mint
         ^{:callable true}
         [amount]
         (when-not (trust/trusted? minter *caller* :mint amount) (fail :TRUST "No rights to mint"))
         (let [amount     (int amount)
               new-supply (+ supply amount) ;; note: might overflow, important check
               bal        (balance *caller*)
               new-bal    (+ bal amount)]
            
           ;; New supply must be in valid range.
           ~(if max-supply `(when-not (<= 0 new-supply max-supply) (fail :STATE "Mint exceeds max supply")))
           
           (log "MINT" *caller* amount new-supply)
           (set-holding *caller* new-bal)
           (set! supply new-supply)
           
        		 )))))

(defn build-token 
  ^{:doc {:description ["Creates deployable code for a new fungible token which follows the interface described in `convex.asset`."
                        "An optional config map can be provided:"
                        "- `:initial-holder`, address which will hold the initial supply (defaults to `*address*`)"
                        "- `:supply`, supply created and attributed to `:initial-holder` (Integer, defaults to 0)"]
          :examples    [{:code "(deploy (build-token {:supply 1000000 :initial-holder *address*}))"}]
          :signature   [{:params [config]}]}}
  [config]
  (let [supply         (int (or (:supply config) 0))
        decimals (int (or (:decimals config) 0))
        initial-holder (address (or (:initial-holder config) *address*))]
    `(do
       (defn -qc [q]
    	  (cond (int? q) q              ;; base case, quantity should always be an integer
    			(nil? q) 0 
    			(fail :ARGUMENT "Invalid quantity")))
    	
       (def supply (-qc ~supply))

       (set-holding ~initial-holder
                    ~supply)

       ;; Map of holder-address -> {offeree-address -> positive integer amount}
       ;; Must enforce valid positive offers
       ;;
       (def offers {})

       ;; Functions of the interface described in the `convex.asset` library
       (defn accept 
         ^:callable
         [sender quantity]
         (let [sender   (address sender)
               quantity (-qc quantity)
               om       (get offers sender) ;; if this is nil then OK, behaves as empty map
               sendbal  (or (get-holding sender)
                            0)
               offer    (get om *caller* 0)]
             (cond 
               (< quantity 0)
               (fail "Can't accept a negative quantity of fungible tokens.")

               (< offer quantity)
               (fail :STATE "Offer is insufficient")

               (< sendbal quantity)
               (fail :FUNDS "Sender token balance is insufficient")

               (let [new-offer (- offer
                                  quantity)] 
                 (def offers
                      (assoc offers
                             sender
                             (if (> new-offer
                                    0)
                               (assoc om
                                      *caller*
                                      new-offer)
                               (dissoc om *caller*))))
                 (set-holding sender
                              (- sendbal
                                 quantity))
                 (set-holding *caller*
                              (+ (or (get-holding *caller*)
                                     0)
                                 quantity))
                 quantity))))

       (defn balance
         ^{:callable true}
         [addr]
         (or (get-holding addr) 0))

       ;; No restrictions on transfer by default.
       ;;
       (defn check-transfer
         ^:callable
         [_sender _receiver _quantity]
         nil)
       
       (defn decimals 
    	  ^:callable
         []
         ~decimals)
       
       (defn total-supply 
    	  ^:callable
         []
         supply)

       (defn direct-transfer
         ^{:callable true}
         [addr amount data]
         (let [addr   (address addr)
               amount (-qc amount)
               bal    (or (get-holding *caller*) 0)
               tbal   (or (get-holding addr) 0)]
           ~(if (:checked? config) 
        	   `(if-let [f (check-transfer *caller* addr amount)] (fail :BLOCK f)))
           
           ;; Amount must be in valid range.
           (cond (< amount 0) (fail :ARGUMENT "negative transfer"))
           (cond (> amount bal) (fail :FUNDS "insufficent token balance")) 
           
           ;; Need this in case of self-transfers.
           (when (= *caller* addr) 
        	   (log "TR" *caller* addr amount bal bal data)   
        	   (return amount)) 
         
           
           (let [nsb (- bal amount)
                 nrb (+ tbal amount)]
               (log "TR" *caller* addr amount nsb nrb data)
	           (set-holding *caller* nsb)
	           (set-holding addr nrb))
	       ))

       (defn get-offer
         ^{:callable true}
         [sender receiver]
         (get-in offers [sender receiver] 0))

       (defn offer
         ^{:callable true}
         [receiver quantity]
         (let [receiver (address receiver)
               quantity (-qc quantity)]
           (if (<= quantity 0)
        	 (set! offers (dissoc-in offers [*caller* receiver])) ;; dissoc if no positive offer
             (set! offers (assoc-in offers [*caller* receiver] quantity)))
           quantity))

       (defn quantity-add
         ^{:callable true}
         [a b]
         (let [a (cond a (int a) 0)
               b (cond b (int b) 0)]
           (+ a b)))

       (defn quantity-sub
         ^{:callable true}
         [a b]
         (let [a (cond a (int a) 0)
               b (cond b (int b) 0)] 
           (if (> a b)
             (- a b)
             0)))

       (defn quantity-subset?
         ^{:callable true}
         [a b]
         (<= (cond a (int a) 0)
             (cond b (int b) 0))))))

;;;;;;;;;; API for handling fungible tokens

(defn decimals 
  ^{:doc {:description "Gets the number of decimal digits for a token."
    :examples    [{:code "(decimals my-token)"}]
    :signature   [{:params [token amount]}]}}
  [token]
  (query 
	(try 
      (call token (decimals))
      0)))

(defn total-supply 
  ^{:doc {:description "Gets the total supply of a fungible token. i.e. the sum of all balances. May return nil if not supported"
		  :examples    [{:code "(total-supply my-token)"}]
		  :signature   [{:params [token amount]}]}}
  [token]
  (query
    (try 
      (call token (total-supply))
      nil)))

(defn balance
  ^{:doc {:description "Gets the balance from a fungible token. Checks the balance for the specified holder, or the current *address* if not specified."
          :examples    [{:code "(balance my-token-address)"}]
          :signature   [{:params [token holder]}]}}
  ([token] 
    (recur token *address*))
  ([token holder]
    (query (call token (balance holder))))) 

(defn burn 
  ^{:doc {:description "Burns an amount of tokens for the given token, if allowed by the implementation. Amount must be non-negative and no greater than the caller's balance."
          :examples    [{:code "(mint my-token-address 1000)"}]
          :signature   [{:params [token amount]}]}}
  [token amount]
  (call token (burn amount)))

(defn mint 
  ^{:doc {:description "Mints an amount of tokens for the given token. User must have minting privileges. Amount may be negative to burn fungible tokens."
          :examples    [{:code "(mint my-token-address 1000)"}]
          :signature   [{:params [token amount]}]}}
  [token amount]
  (call token (mint amount)))

(defn transfer 
  ^{:doc {:description "Transfers balance of a fungible token."
          :examples    [{:code "(transfer my-token-address my-friend 100)"}]
          :signature   [{:params [token target amount]}]}}
  ([token target amount]
    (recur token target amount nil))
  ([token target amount data]
	  (cond
	    ;; First check if receiver has a callable receive-asset function. If so, use this
	    (callable? target 'receive-asset)
	      (let [amount (int amount)] 
	        (offer target token amount) ;; Offer correct quantity
	        (call target 
	          (receive-asset token amount nil)))
				     
	    ;; An actor without a receive-asset function is not a valid receiver?
	    (actor? target) (fail :STATE "Target Actor does not have receive-asset function")
				    
	    (call token (direct-transfer target amount data))))) 
