'asset.market.trade

(import convex.asset :as asset)

;; Counter for available trade IDs
(def counter 0)

;; Map of Trade ID -> [item price seller status]
;; Where status is:
;;   nil : unsold
;;   true : sold
(def trades
  {})

;; Utility functions

(defn -get-rec [id]
  (or (get trades id) (fail :STATE "Trade not available")))


;; Main trade API

(defn post 
  [item price]
  (asset/offer ~*address* item)
  (call ~*address* (post-impl item price)))

(defn post-impl ^:callable
  [item price]
  (let [id (inc counter)]
    ;; accept the input
    (asset/accept *caller* item)
    (set! trades (assoc trades id [item price *caller* nil]))
    (set! counter id)
    id))

(defn buy 
  [id]
  (let [rec (-get-rec id)
        [item price seller status] rec]
    (asset/offer ~*address* price)
    (call ~*address* (buy-impl id))))

(defn buy-impl ^:callable
  ([] (recur *scope*))
  ([id]
    (let [rec (-get-rec id)
          [item price seller status] rec]
      (if status (fail :STATE "Item already sold"))
      
      ;; Do this first. Need to prevent re-entrancy attack via status here!!!!
      (set! trades (assoc trades id [item price seller true]))
      
      ;; accept the price from caller
      (asset/accept *caller* price)
      
      ;; Transfer item to buyer. This might trigger receive-asset? But OK since last op
      (asset/transfer *caller* item)
      :OK)))

(defn cancel 
  [id]
  (call ~*address* (cancel-impl id)))

(defn cancel-impl ^:callable
  ([] (recur *scope*))
  
  ([id ]
    (let [rec (-get-rec id)
          [item price seller status] rec]
      
      (if status (fail :STATE "Item already sold"))
     
      (or (= *caller* seller) (fail :TRUST "Only seller can cancel trade"))
      
      ;; Delete record first
      (set! trades (dissoc trades id))
      
      (asset/transfer *caller* item)
      :OK)))

(defn claim ^:callable
  ([] (recur *scope*))
  ([id]
    (let [rec (-get-rec id)
          [item price seller status] rec]
      (if (nil? status) (fail :STATE "Item not sold"))
      (or (= *caller* seller) (fail :TRUST "Only seller can claim payment"))
      
      ;; Do this first. Need to prevent re-entrancy attack via status here!!!!
      (set! trades (dissoc trades id))
      
      (asset/transfer *caller* price)
      :OK)))
 