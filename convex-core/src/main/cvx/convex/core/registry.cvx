'convex.registry

(set-holding *address*
             {:description ["CNS Registry - for resolving arbitrary symbols to addresses."
                            "Hosts the CNS root namespace(s)."]
              :name        "Convex Name Service"})

;;
;;
;; Deployed by default during network initialisation at a well-known address.
;; Initialization takes care of registering this registry alongside other actors and libraries.
;;
;; This make it accessible from early in network bootstrap as a way to register and locate Accounts.
;;
;;

(declare update create)

;;;;;;;;;; Values

(def trust
  ^{:private true}
  ;; Address of `convex.trust`, it is deployed right after this account, hence it is predictable.
  (address (inc (long *address*))))

;;;;;;;;;; Address metadata registry

(defn lookup
  ^{:callable true
    :doc       {:description "Looks up registry metadata for a given address."
                :examples    [{:code "(call *registry* (lookup somebody)"}]
                :signature   [{:params [addr]}]}}
  [addr]
  (get-holding (address addr)))


(defn register
  ^{:callable true
    :doc       {:description "Registers metadata for the *caller* account. Metadata can be an arbitrary value, but by convention is a map with defined fields."
                :examples    [{:code "(call *registry* (register  {:name \"My Name\"})"}]
                :signature   [{:params [metadata]}]}}
  [data]
  (set-holding *caller* data))

;;;;;;;;;;;;;; Convex Name System root

;; CNS root reference, i.e. this registry with an empty vector key
(def root [~*address* []])

;; Root controller: the Convex governance account #6
(def root-controller #6)

;; Map of `path vector` -> `segment name` -> `[value trust-monitor meta child]`
;; Where:
;;    value = Target value for CNS resolution, usually an address or scoped address
;;	  trust-monitor = controller for this CNS entry
;;    meta = metadata field		
;;    child = child CNS node, may be nil. Usually a scoped address defining an actor and a path key e.g. [#5675 "bob"] 
;;		
;; Node key is implementation defined in general, but for main registry uses:
;;    Empty vector for CNS root
;;    Vector of segment strings for paths
(def cns-database
   ^{:private? true}
  {[] {"init" [#1         root-controller nil nil]}})

;; Controllers for each CNS node managed under this actor
;; Default root is controlled by INIT account
;; Checked for permissions:
;;   :control - change CNS node ownership
;;   :create  - create new CNS entry in this node (child path segment as object)
;;   :delete  - delete CNS entry in this node     (child path segment as object)
(def cns-owners 
  {[] #6})

(defn -check [sym]
  (cond (symbol? sym) 
    (split (name sym) \.)	  
    (fail :ARGUMENT "CNS name must be a Symbol")))

;; ========================================================
;; CNS User API - See CAD014

(defn read ^{
	:callable    true    ;; can be called or used a library function
	:doc         {:description "Reads a CNS record as a [value controller metadata child] vector, or nil if record does not exist."
    :examples    [{:code "(*registry*/read 'my.actor.name)"}]
    :signature   [{:params [sym]}]}}
  [sym]
	(query  ;; wrap in query because this should all be read-only, no nasty state surprises
	  (let [path (-check sym)
	        n (count path)]
        (loop [i 0 
               ref root]
          (let [pname (nth path i)
                rec (call ref (cns-read pname))]
            (cond 
              ;; return nil if no entry found
        	  (nil? rec) (return nil)
              
              ;; Return record if at end of path
              (>= (inc i) n) (return rec)
        	  
              ;; recurse into next level CNS node
              (if-let [child (nth rec 3)]
            	(recur (inc i) child))
      
              ;; otherwise fall through with nil return value
              ))))))

(defn resolve ^{
	:callable    true    ;; can be called or used a library function
	:doc         {:description "Resolves a CNS entry. Returns nil if entry does not exist"
    :examples    [{:code "(*registry*/resolve 'my.actor.name)"}]
    :signature   [{:params [sym]}]}}
  [sym]
  (get (read sym) 0))

(defn create ^{
	:doc  {:description "Creates a CNS entry with given reference, controller and metadata"
	       :examples    [{:code "(*registry*/create 'my.actor.name target *address* {:some :metadata})"}]
	       :signature   [{:params [sym]}]}}

  ([sym] (recur sym nil *address* nil nil))
  ([sym addr] (recur sym addr *address* nil nil))
  ([sym addr cont] (recur sym addr cont nil nil))
  ([sym addr cont meta] (recur sym addr cont meta nil))
  ([sym addr cont meta child] 
	(let [path (-check sym)
	      n (count path)]
	  (cond (zero? n) (fail :ARGUMENT "CNS path must have at least one segment"))
	  (loop [i 0 
		     ref root]
	    (let [pname (get path i)]
		 (cond 
		    (nil? ref) 
		      (fail :STATE (str "No CNS child path at: " (slice path 0 i)))
		    
			;; are we at end of path? if so perform write at current position
		    (>= (inc i) n) 
			   (call ref (cns-write pname addr cont meta child) )
			   
			(if-let [rec (call ref (cns-read pname))]
				(recur (inc i) (first rec))	
				
				;; need to construct a new (empty) intermediate CNS child node here
				(let [nref (call ref (cns-create-node pname cont))] 
				   (call ref (cns-write pname nil cont nil nref) )
				   (recur (inc i) nref)))
		 ))
	  )
	)
	sym
	))

(defn control
  [sym cont]
  (if-let [rec (read sym)]
    (let [[v c m child] rec]
      (update sym v cont m))
    (fail :STATE "CNS record does not exist")))


(defn change-control
   ^{:callable true
	  :doc {:description "Changes controller for a CNS node."
			                :examples    [{:code "(call *registry* (cns-control 'my.actor trust-monitor-address)"}]
			                :signature   [{:params [name addr]}]}}
  [cont]
  (let [owners cns-owners
        own (get owners *scope*)]
    (cond 
      (trust/trusted? own *caller* :control)
      (set! cns-owners (assoc owners *scope* cont))
      (fail :TRUST "No control right for CNS node"))))

(defn -controller [path]
  (cond
	(empty? *scope*) root-controller
	(let [[& ps p] *scope*]
	  (get-in cns-database [ps p 1]))))

;; ============================================================================
;; Standard CNS SPI - exprected to be callable by libraries / advanced users

(defn cns-control
  ^{:callable true
    :doc       {:description "Updates a CNS name mapping to set a new controller. May only be performed by a current controller."
                :examples    [{:code "(call *registry* (cns-control 'my.actor trust-monitor-address)"}]
                :signature   [{:params [name addr]}]}}
  [sym controller]
  (let [path (-check sym)
        record (get cns-database path)]
    (when (nil? record)
      (fail :STATE "CNS record does not exist"))
    (when (not (trust/trusted? (second record) *caller* :control))
      (fail :TRUST "Caller is not trusted with transferring control for that CNS record"))
    (set-in! cns-database [path 1] controller)))

(defn cns-resolve
  ^{:callable true
    :doc {:description "Resolves a name in the Convex Name Service."
          :examples    [{:code "(call *registry* (cns-resolve 'convex.registry)"}]
          :signature   [{:params [addr]}]}}
  [sym]
  (let [path (-check sym)
        record (get cns-database path)]
    (if record (first record) nil)))

(defn cns-update
  ^{:callable true
    :doc       {:description "Updates or adds a name mapping in the Convex Name Service. Only the owner of a CNS record may update the mapping for an existing name"
                :examples    [{:code "(call *registry* (cns-update 'my.actor addr)"}]
                :signature   [{:params [name addr]}]}}
  ([sym addr]
    (recur sym addr nil))
  ([sym addr meta]
	(when-not (account addr)
	  (fail :NOBODY "Can only use an existing account"))
	(let [path (-check sym)
	      record (get cns-database path) 
	      monitor (if record (second record) *caller*)] ;; TODO limit ability to crteate top level CNS
      (and record (not (trust/trusted? monitor *caller* :update))
        (fail :TRUST "Unauthorised update to CNS record"))
    
      (set! cns-database
         (assoc cns-database
                path
                [addr monitor meta])))))

(defn cns-create-node
	^{:callable true
	  :doc {:description "Creates a child CNS node."
			:examples    [{:code "(call parent-node (cns-create-node \\\"child-name\\\"))"}]
			:signature   [{:params [sym]}]}}
	[pname owner]
	(or (trust/trusted? (get cns-owners *scope*) *caller* :create pname) (fail :TRUST "No permission to create CNS node"))
	(let [path (conj *scope* pname)]
	  (if (get cns-database path) (fail :STATE "CNS node already exists"))
	  (set-in! cns-owners [path] owner)
	  (set-in! cns-database [path] {})
	  [~*address* path]))

(defn cns-read
	^{:callable true
	  :doc {:description "Reads a child CNS record from this CNS node. Assumes a path vector passed in *scope*."
			:examples    [{:code "(call [cns-node cns-key] (cns-read \\\"my-name\\\"))"}]
			:signature   [{:params [sym]}]}}
	[pname]
	(get-in cns-database [*scope* pname]))

(defn cns-write
	^{:callable true
	  :doc {:description "Writes a CNS record from this Actor. Assumes a path vector passed in *scope*."
	  :examples    [{:code "(call [cns-node cns-key] (cns-write \"my-name\" new-record))"}]
						:signature   [{:params [sym]}]}}
	[pname addr cont meta child]
    (let [sm (get cns-database *scope*)]
	  (or (str? pname) (fail :ARGUMENT "CNS path element must be a string"))  
	  (or sm (error :STATE "CNS Node key not valid"))
	  (if-let [rec (get sm pname)]
    	;; This is an existing record, so check record controller
    	(or (trust/trusted? (get rec 1) *caller* :update) (fail :TRUST "No permission to update CNS record"))
    	;; This is a new record, so check create permission TODO use per-node monitor?
    	(or (trust/trusted? (-controller *scope*) *caller* :create pname) (fail :TRUST "No permission to create CNS record")))
    		
      ;; update record since at this point all required checks have passed
	  (set-in! cns-database [*scope* pname] [addr cont meta child])))

;; =========================================
;; Trust SPI
;;
;; Yes, CNS records are trust monitors!
;; Delegates trust check to the record controller

(defn check-trusted? 
  ^:callable
  [subject action object]
  (cond
	(empty? *scope*) (trust/trusted? root-controller subject action object)
	(let [[& ps pname] *scope*
	      cont (get-in cns-database [ps pname 1])]
	  (trust/trusted? cont subject action object))))




