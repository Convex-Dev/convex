;;
;;
;; Prototype for Clojure-like transducers
;;
;; https://clojure.org/reference/transducers
;;
;;



(call *registry*
      (cns-update 'convex.xform
                  *address*))



(defn filter

  [f]

  (fn [rf]

   (fn
     ([]
      (rf))

     ([result]
      (rf result))

     ([acc x]

      (if (f x)
        (rf acc
            x)
        acc)))))



(defn map

  [f]

  (fn [rf]

    (fn
      ([]
       (rf))

      ([result]
       (rf result))

      ([acc x]
       (rf acc
           (f x)))

      ([acc x & x+]
       (rf acc
           (apply f
                  x
                  x+))))))



(defn transduce


  ([xform f coll]
   
   (transduce xform
              f
              (f)
              coll))


  ([xform f init coll]

   (let [f-2 (xform f)]
     (f-2 (reduce f-2
                  init
                  coll)))))



(defn first

  ([]

   nil)


  ([result]

   result)


  ([_acc x]

   (reduced x)))



(defn first-n

  [n]

  (fn
    ([] [])


    ([result]

     result)


    ([acc x]

     (let [acc-2 (conj acc
                       x)]
       (if (>= (count acc-2)
               n)
         (reduced acc-2)
         acc-2)))))



(defn last

  ([]

   nil)


  ([result]

   result)


  ([_acc x]

   x))



(defn last-n

  ;; TODO. Fails because of: https://github.com/Convex-Dev/convex/issues/193

  [n]

  (fn
    ([]

     [0
      (loop [acc []
             i   0]
        (if (< i
               n)
          (recur (conj acc
                       nil)
                 (inc i))
          acc))])

    
    ([[_pointer acc]]

      acc)


    ([[pointer acc] x]

     [(inc pointer)
      (assoc acc
             (rem pointer
                  n)
             x)])))
