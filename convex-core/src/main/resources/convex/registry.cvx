'convex.registry

;; This code implements the standard Convex Registry
;;
;; It is deployed by default during network initialisation
;; at the well-known address *registry* = xxx
;;
;; This make it accessible from early in network bootstrap as a way to register and locate Accounts.

;; ======================================================
;; Address metadata registry

(set-holding *address* {:name "Registry Contract"})

;; ======================================================
;; CNS Database 
;; 
;; Resistry is a map of symbol -> [resolved-address controller]

(def trust
  ^{:private? true}
  (address (inc (long *address*))))

(def cns-database {})


;; =============================================================
;; Registry functions

(defn register 
  ^{:callable? true
    :doc {:description "Registers metadata for the *caller* account. Metadata can be an arbitrary value, but by convention is a map with defined fields."
       :examples [{:code "(call *registry* (register  {:name \"My Name\"})"}]
       :type :function
       :signature [{:params [metadata]}]}
    }
  [data]
  (set-holding *caller* data))
  
(defn lookup 
  ^{:callable? true
    :doc {:description "Looks up registry metadata for a given address."
       :examples [{:code "(call *registry* (lookup somebody)"}]
       :type :function
       :signature [{:params [addr]}]}
    }
  [addr]
  (get-holding (address addr)))



;; =============================================================
;; CNS functions


(defn cns-resolve 
  ^{:callable? true
    :doc {:description "Resolves a name in the Convex Name Service."
       :examples [{:code "(call *registry* (cns-resolve 'convex.registry)"}]
       :type :function
       :signature [{:params [addr]}]}
    }
  [name]
  (let [sym (symbol name)
        rec (get cns-database sym)]
    (if rec
      (first rec))
    )
  )

 (defn cns-update
  ^{:callable? true
    :doc {:description "Updates or adds a name mapping in the Convex Name Service. Only the owner of a CNS record may update the mapping for an existing name"
       :examples [{:code "(call *registry* (cns-update 'my.magic.actor addr)"}]
       :type :function
       :signature [{:params [name addr]}]}
    }
  ([name addr]
      (let [addr (address addr)
            caller *caller*
            sym (symbol name)
            rec (get cns-database sym)]
      ;; Check if entry is already present, if so fail if caller is not a valid controller 
        (and rec (not (trust/trusted? (second rec) caller))
          (fail :TRUST "Caller does not have permission to update CNS"))
     
        ;; All OK at this point, so update CNS normally with [address owner] vector
        (def cns-database (assoc cns-database sym [addr caller])))))
 
 (defn cns-control
  ^{:callable? true
    :doc {:description "Updates a CNS name mapping to set a new controller. May only be peformed by a current controller."
       :examples [{:code "(call *registry* (cns-control 'my.magic.actor trust-monitor-address)"}]
       :type :function
       :signature [{:params [name addr]}]}
    }
  ([name addr]
      (let [new-controller (address addr)
            caller *caller*
            sym (symbol name)
            rec (or (get cns-database sym) (fail :STATE "CNS record does not exist"))]
   ;; Check if entry is already present, if so fail if caller is not a valid controller 
     (if (not (trust/trusted? (second rec) caller))
          (fail :TRUST "Caller does not have permission to update CNS"))
     
        ;; All OK at this point, so update CNS with [address owner] vector
     (def cns-database (assoc cns-database sym (assoc rec 1 new-controller))))))
